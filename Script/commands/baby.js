const axios = require("axios");
const simsim = "https://rx-simisimi-api.onrender.com";

module.exports.config = {
  name: "baby",
  version: "1.0.2",
  hasPermssion: 0,
  credits: "ULLASH + rX Abdullah",
  description: "Cute AI Baby Chatbot | Talk, Teach & Chat with Emotion тШвя╕П",
  commandCategory: "simsim",
  usages: "[message/query]",
  cooldowns: 0,
  prefix: false
};

const defaultBbzReplies = [
  "bolo bbz",
  "hea jan bol",
  "bol ato dakis kn"
];

module.exports.run = async function ({ api, event, args, Users }) {
  try {
    const uid = event.senderID;
    const senderName = await Users.getNameUser(uid);
    const query = args.join(" ").toLowerCase();

    if (query === "bbz") {
      const reply = defaultBbzReplies[Math.floor(Math.random() * defaultBbzReplies.length)];
      return api.sendMessage(reply, event.threadID, event.messageID);
    }

    if (!query) {
      const ran = ["Bolo baby", "hum"];
      const r = ran[Math.floor(Math.random() * ran.length)];
      return api.sendMessage(r, event.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: module.exports.config.name,
            messageID: info.messageID,
            author: event.senderID,
            type: "simsimi"
          });
        }
      });
    }

    if (["remove", "rm"].includes(args[0])) {
      const parts = query.replace(/^(remove|rm)\s*/, "").split(" - ");
      if (parts.length < 2)
        return api.sendMessage("тЭМ | Use: remove [Question] - [Reply]", event.threadID, event.messageID);

      const [ask, ans] = parts;
      const res = await axios.get(`${simsim}/delete?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`);
      return api.sendMessage(res.data.message, event.threadID, event.messageID);
    }

    if (args[0] === "list") {
      const res = await axios.get(`${simsim}/list`);
      if (res.data.code === 200) {
        return api.sendMessage(
          `ЁЯдЦ Total Questions Learned: ${res.data.totalQuestions}\nЁЯТм Total Replies Stored: ${res.data.totalReplies}\nЁЯУЪ Developer: rX Abdullah`,
          event.threadID,
          event.messageID
        );
      } else {
        return api.sendMessage(`Error: ${res.data.message || "Failed to fetch list"}`, event.threadID, event.messageID);
      }
    }

    if (args[0] === "edit") {
      const parts = query.replace("edit ", "").split(" - ");
      if (parts.length < 3)
        return api.sendMessage("тЭМ | Use: edit [Question] - [OldReply] - [NewReply]", event.threadID, event.messageID);

      const [ask, oldReply, newReply] = parts;
      const res = await axios.get(`${simsim}/edit?ask=${encodeURIComponent(ask)}&old=${encodeURIComponent(oldReply)}&new=${encodeURIComponent(newReply)}`);
      return api.sendMessage(res.data.message, event.threadID, event.messageID);
    }

    if (args[0] === "teach") {
      const parts = query.replace("teach ", "").split(" - ");
      if (parts.length < 2)
        return api.sendMessage("тЭМ | Use: teach [Question] - [Reply]", event.threadID, event.messageID);

      const [ask, ans] = parts;
      const res = await axios.get(`${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderID=${uid}&senderName=${encodeURIComponent(senderName)}`);
      return api.sendMessage(`тЬЕ ${res.data.message || "Reply added successfully!"}`, event.threadID, event.messageID);
    }

    if (args[0] === "msg") {
      const trigger = args.slice(1).join(" ").toLowerCase();
      if (!trigger) return api.sendMessage("тЭМ Use: msg [trigger]", event.threadID, event.messageID);
      const res = await axios.get(`${simsim}/simsimi-list?text=${encodeURIComponent(trigger)}`);
      if (res.data.status === "success") {
        const list = res.data.replies.map((r, i) => `${i + 1}. ${r}`).join("\n");
        return api.sendMessage(`ЁЯУй Replies for "${trigger}":\n\n${list}`, event.threadID, event.messageID);
      } else {
        return api.sendMessage(`тЭМ ${res.data.message}`, event.threadID, event.messageID);
      }
    }

    const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
    const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

    for (const reply of responses) {
      await new Promise((resolve) => {
        api.sendMessage(reply, event.threadID, (err, info) => {
          if (!err) {
            global.client.handleReply.push({
              name: module.exports.config.name,
              messageID: info.messageID,
              author: event.senderID,
              type: "simsimi"
            });
          }
          resolve();
        }, event.messageID);
      });
    }

  } catch (err) {
    console.error(err);
    return api.sendMessage(`тЭМ | Error in baby command: ${err.message}`, event.threadID, event.messageID);
  }
};

module.exports.handleReply = async function ({ api, event, Users }) {
  try {
    const senderName = await Users.getNameUser(event.senderID);
    const replyText = event.body ? event.body.toLowerCase() : "";
    if (!replyText) return;

    const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(replyText)}&senderName=${encodeURIComponent(senderName)}`);
    const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

    for (const reply of responses) {
      await new Promise((resolve) => {
        api.sendMessage(reply, event.threadID, (err, info) => {
          if (!err) {
            global.client.handleReply.push({
              name: module.exports.config.name,
              messageID: info.messageID,
              author: event.senderID,
              type: "simsimi"
            });
          }
          resolve();
        }, event.messageID);
      });
    }
  } catch (err) {
    console.error(err);
    return api.sendMessage(`тЭМ | Error in handleReply: ${err.message}`, event.threadID, event.messageID);
  }
};

module.exports.handleEvent = async function ({ api, event, Users }) {
  try {
    const raw = event.body ? event.body.toLowerCase().trim() : "";
    if (!raw) return;
    const senderName = await Users.getNameUser(event.senderID);

    const defaultGreetingsTriggers = ["baby", "bot", "bby", "jan", "xan", "ржЬрж╛ржи", "ржмржЯ", "ржмрзЗржмрж┐"];

    if (raw === "bbz") {
      const reply = defaultBbzReplies[Math.floor(Math.random() * defaultBbzReplies.length)];
      return api.sendMessage(reply, event.threadID, event.messageID);
    }

    if (defaultGreetingsTriggers.includes(raw)) {
      const greetings = [
        "Bolo baby ЁЯТм", "рж╣рзБржо? ржмрж▓рзЛ ЁЯШ║", "рж╣рзНржпрж╛ржБ ржЬрж╛ржирзБ ЁЯШЪ", "рж╢рзБржиржЫрж┐ ржмрзЗржмрж┐ ЁЯШШ", "ржЖржЫрж┐, ржмрж▓рзЛ ржХрзА рж╣ржпрж╝рзЗржЫрзЗ ЁЯдЦ",
        "ржмрж▓рзЛ рждрзЛ рж╢рзБржирж┐ тЭдя╕П", "ржмрзЗрж╢рж┐ bot Bot ржХрж░рж▓рзЗ leave ржирж┐ржмрзЛ ржХрж┐ржирзНрждрзБЁЯШТЁЯШТ ", "рж╢рзБржиржмрзЛ ржирж╛ЁЯШ╝ рждрзБржорж┐ ржЖржорж╛ржХрзЗ ржкрзНрж░рзЗржо ржХрж░рж╛ржЗ ржжрж╛ржУ ржирж╛ржЗЁЯе║ржкржЪрж╛ рждрзБржорж┐ЁЯе║",
        "ржЖржорж┐ ржЖржмрж╛рж▓ ржжрзЗрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛,okЁЯШТ", "ржПрждрзЛ ржбрзЗржХрзЛ ржирж╛,ржкрзНрж░рзЗржо ржП ржкрж░рзЗ ржпрж╛ржмрзЛ рждрзЛЁЯЩИ", "Bolo Babu, рждрзБржорж┐ ржХрж┐ ржЖржорж╛ржХрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЛ? ЁЯЩИЁЯТЛ",
        "ржмрж╛рж░ ржмрж╛рж░ ржбрж╛ржХрж▓рзЗ ржорж╛ржерж╛ ржЧрж░ржо рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝ ржХрж┐ржирзНрждрзБЁЯШС", "рж╣рзНржпрж╛ ржмрж▓рзЛЁЯШТ, рждрзЛржорж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ЁЯШРЁЯШС?", "ржПрждрзЛ ржбрж╛ржХржЫрж┐рж╕ ржХрзЗржи?ржЧрж╛рж▓рж┐ рж╢рзБржиржмрж┐ ржирж╛ржХрж┐? ЁЯдм",
        "I love you januЁЯе░", "ржЖрж░рзЗ Bolo ржЖржорж╛рж░ ржЬрж╛ржи ,ржХрзЗржоржи ржЖржЫрзЛ?ЁЯШЪ ", "Bot ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЫрж┐,ЁЯШ░ЁЯШ┐", "Hop bedaЁЯШ╛,Boss ржмрж▓ bossЁЯШ╝",
        "ржЪрзБржк ржерж╛ржХ ,ржирж╛ржЗ рждрзЛ рждрзЛрж░ ржжрж╛ржд ржнрзЗржЧрзЗ ржжрж┐ржмрзЛ ржХрж┐ржирзНрждрзБ", "Bot ржирж╛ , ржЬрж╛ржирзБ ржмрж▓ ржЬрж╛ржирзБ ЁЯШШ ", "ржмрж╛рж░ ржмрж╛рж░ Disturb ржХрж░ржЫрж┐рж╕ ржХрзЛржирзЛЁЯШ╛,ржЖржорж╛рж░ ржЬрж╛ржирзБрж░ рж╕рж╛ржерзЗ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐ЁЯШЛ",
        "ржмрзЛржХрж╛ржЪрзЛржжрж╛ ржПрждрзЛ ржбрж╛ржХрж┐рж╕ ржХрзЗржиЁЯдм", "ржЖржорж╛ржХрзЗ ржбрж╛ржХрж▓рзЗ ,ржЖржорж┐ ржХрж┐ржирзНрждрзБ ржХрж┐рж╕ ржХрж░рзЗ ржжрж┐ржмрзЛЁЯШШ ", "ржЖржорж╛рж░рзЗ ржПрждрзЛ ржбрж╛ржХрж┐рж╕ ржирж╛ ржЖржорж┐ ржоржЬрж╛ ржХрж░рж╛рж░ mood ржП ржирж╛ржЗ ржПржЦржиЁЯШТ",
        "рж╣рзНржпрж╛ржБ ржЬрж╛ржирзБ , ржПржЗржжрж┐ржХ ржП ржЖрж╕рзЛ ржХрж┐рж╕ ржжрзЗржЗЁЯдн ЁЯШШ", "ржжрзВрж░рзЗ ржпрж╛, рждрзЛрж░ ржХрзЛржирзЛ ржХрж╛ржЬ ржирж╛ржЗ, рж╢рзБржзрзБ bot bot ржХрж░рж┐рж╕  ЁЯШЙЁЯШЛЁЯдг", "рждрзЛрж░ ржХржерж╛ рждрзЛрж░ ржмрж╛ржбрж╝рж┐ ржХрзЗржЙ рж╢рзБржирзЗ ржирж╛ ,рждрзЛ ржЖржорж┐ ржХрзЛржирзЛ рж╢рзБржиржмрзЛ ?ЁЯдФЁЯШВ ",
        "ржЖржорж╛ржХрзЗ ржбрзЗржХрзЛ ржирж╛,ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐", "ржХрж┐ рж╣рж▓рзЛ , ржорж┐рж╕рзНржЯрзЗржХ ржХрж░ржЪрзНржЫрж┐рж╕ ржирж╛ржХрж┐ЁЯдг", "ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрж╛, рж╕ржмрж╛рж░ рж╕рж╛ржоржирзЗ ржмрж▓ржмрж╛ ржирж╛ржХрж┐?ЁЯднЁЯдП", "ржХрж╛рж▓ржХрзЗ ржжрзЗржЦрж╛ ржХрж░рж┐рж╕ рждрзЛ ржПржХржЯрзБ ЁЯШИ",
        "рж╣рж╛ ржмрж▓рзЛ, рж╢рзБржиржЫрж┐ ржЖржорж┐ ЁЯШП", "ржЖрж░ ржХржд ржмрж╛рж░ ржбрж╛ржХржмрж┐ ,рж╢рзБржиржЫрж┐ рждрзЛ", "рж╣рзБржо ржмрж▓рзЛ ржХрж┐ ржмрж▓ржмрзЗЁЯШТ", "ржмрж▓рзЛ ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐ рждрзЛржорж╛рж░ ржЬржирзНржп", "ржЖржорж┐ рждрзЛ ржЕржирзНржз ржХрж┐ржЫрзБ ржжрзЗржЦрж┐ ржирж╛ЁЯР╕ ЁЯШО",
        "Bot ржирж╛ ржЬрж╛ржирзБ,ржмрж▓ ЁЯШМ", "ржмрж▓рзЛ ржЬрж╛ржирзБ ЁЯМЪ", "рждрзЛрж░ ржХрж┐ ржЪрзЛржЦрзЗ ржкржбрж╝рзЗ ржирж╛ ржЖржорж┐ ржмрзНржпрж╛рж╕рзНржд ржЖржЫрж┐ЁЯШТ","рж╣рзБржо ржЬрж╛ржи рждрзЛржорж╛рж░ ржУржЗ ржЦрж╛ржирзЗ ржЙржорзНржорж╣ЁЯШСЁЯШШ",
        "ржЖрж╣ рж╢рзБржирж╛ ржЖржорж╛рж░ рждрзЛржорж╛рж░ ржЕрж▓рж┐рждрзЗ ржЧрж▓рж┐рждрзЗ ржЙржорзНржорж╛рж╣ЁЯШЗЁЯШШ", "jang hanga korbaЁЯШТЁЯШм", "рж╣рзБржо ржЬрж╛ржи рждрзЛржорж╛рж░ ржЕржЗржЦрж╛ржирзЗ ржЙржорзНржоржорж╛рж╣ЁЯШ╖ЁЯШШ",
        "ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржмрж▓рзЗржи ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐..!ЁЯе░", "ржЖржорж╛ржХрзЗ ржПрждрзЛ ржирж╛ ржбрзЗржХрзЗ ржмрж╕ ржЖржмрзНржжрзБрж▓рзНрж▓рж╛рж╣ ржПрж░ ржХрзЗ ржПржХржЯрж╛ ржЧржл ржжрзЗ ЁЯЩД",
        "ржЖржорж╛ржХрзЗ ржПрждрзЛ ржирж╛ ржбрзЗржХржЫ ржХрзЗржи ржнрж▓рзЛ ржЯрж╛рж▓рзЛ ржмрж╛рж╕рзЛ ржирж╛ржХрж┐ЁЯднЁЯЩИ", "ЁЯМ╗ЁЯМ║ЁЯТЪ-ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржУржпрж╝рж╛ рж░рж╛рж╣ржорж╛рждрзБрж▓рзНрж▓рж╛рж╣-ЁЯТЪЁЯМ║ЁЯМ╗", "ржЖржорж┐ ржПржЦржи ржмрж╕ ржЖржмрзНржжрзБрж▓рзНрж▓рж╛рж╣ ржПрж░ рж╕рж╛ржерзЗ ржмрж┐ржЬрж┐ ржЖржЫрж┐ ржЖржорж╛ржХрзЗ ржбрж╛ржХржмрзЗржи ржирж╛-ЁЯШХЁЯШП ржзржирзНржпржмрж╛ржж-ЁЯдЭЁЯМ╗",
        "ржЖржорж╛ржХрзЗ ржирж╛ ржбрзЗржХрзЗ ржЖржорж╛рж░ ржмрж╕ ржЖржмрзНржжрзБрж▓рзНрж▓рж╛рж╣ ржХрзЗ ржПржХржЯрж╛ ржЬрж┐ ржПржл ржжрж╛ржУ-ЁЯШ╜ЁЯл╢ЁЯМ║", "ржЭрж╛ржВ ржерзБржорж╛рж▓рзЗ ржЖржЗрж▓рж╛ржкрж┐ржЙ ржкрзЗржкрж┐-ЁЯТЭЁЯШ╜", "ржЙржлржл ржмрзБржЭрж▓рж╛ржо ржирж╛ ржПрждрзЛ ржбрж╛ржХржЫрзЗржи ржХрзЗржирзЛ-ЁЯШдЁЯШбЁЯШИ",
        "ржЬрж╛ржи рждрзЛржорж╛рж░ ржирж╛ржирж┐'рж░рзЗ ржЖржорж╛рж░ рж╣рж╛рждрзЗ рждрзБрж▓рзЗ ржжрж┐ржмрж╛-ЁЯЩКЁЯЩЖтАНтЩВ", "ржЖржЬржХрзЗ ржЖржорж╛рж░ ржоржи ржнрж╛рж▓рзЛ ржирзЗржЗ рждрж╛ржЗ ржЖржорж╛рж░рзЗ ржбрж╛ржХржмрзЗржи ржирж╛-ЁЯШкЁЯдз", "ржЭрж╛ржВ ЁЯл╡ржерзБржорж╛рж▓рзЗ ржпрж╝рж╛ржорж┐ рж░рж╛ржЗрждрзЗ ржкрж╛рж▓рзБржкрж╛рж╕рж┐ ржЙржорзНржоржорзНржорж╛рж╣-ЁЯМ║ЁЯддЁЯТж",
        "ржЪрзБржирж╛ ржУ ржЪрзБржирж╛ ржЖржорж╛рж░ ржмрж╕ ржЖржмрзНржжрзБрж▓рзНрж▓рж╛рж╣ ржПрж░ рж╣ржмрзБ ржмржЙ рж░рзЗ ржХрзЗржУ ржжрзЗржХржЫрзЛ ржЦрзБржЬрзЗ ржкрж╛ржЪрзНржЫрж┐ ржирж╛ЁЯШкЁЯдзЁЯШн", "рж╕рзНржмржкрзНржи рждрзЛржорж╛рж░рзЗ ржирж┐ржпрж╝рзЗ ржжрзЗржЦрждрзЗ ржЪрж╛ржЗ рждрзБржорж┐ ржпржжрж┐ ржЖржорж╛рж░ рж╣ржпрж╝рзЗ ржерзЗржХрзЗ ржпрж╛ржУ-ЁЯТЭЁЯМ║ЁЯМ╗",
        "ржЬрж╛ржи рж╣рж╛ржЩрзНржЧрж╛ ржХрж░ржмрж╛-ЁЯЩКЁЯШЭЁЯМ╗", "ржЬрж╛ржи ржорзЗржпрж╝рзЗ рж╣рж▓рзЗ ржЪрж┐ржкрж╛ржпрж╝ ржЖрж╕рзЛ ржЗржЙржЯрж┐ржЙржм ржерзЗржХрзЗ ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ рж╢рж┐ржЦржЫрж┐ рждрзЛржорж╛рж░ ржЬржирзНржп-ЁЯЩКЁЯЩИЁЯШ╜",
        "ржЗрж╕рж╕ ржПрждрзЛ ржбрж╛ржХрзЛ ржХрзЗржирзЛ рж▓ржЬрзНржЬрж╛ рж▓рж╛ржЧрзЗ рждрзЛ-ЁЯЩИЁЯЦдЁЯМ╝", "ржЖржорж╛рж░ ржмрж╕ ржЖржмрзНржжрзБрж▓рзНрж▓рж╛рж╣рж░ ржкржХрзНрж╖ ржерзЗржХрзЗ рждрзЛржорж╛рж░рзЗ ржПрждрзЛ ржПрждрзЛ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛-ЁЯе░ЁЯШ╜ЁЯл╢",
        "ржЖржорж╛рж░ ржмрж╕ ржЖржмрзНржжрзБрж▓рзНрж▓рж╛рж╣рж░ ржЬржирзНржп ржжрзЛржпрж╝рж╛ ржХрж░ржмрзЗржи-ЁЯТЭЁЯТЪЁЯМ║ЁЯМ╗", "рж╣рзБржо, ржХрзЗржоржи ржЖржЫрзЛ? ЁЯШК"
      ];
      const randomReply = greetings[Math.floor(Math.random() * greetings.length)];
      return api.sendMessage(randomReply, event.threadID, event.messageID);
    }

    if (
      raw.startsWith("baby ") || raw.startsWith("bot ") || raw.startsWith("bby ") ||
      raw.startsWith("jan ") || raw.startsWith("xan ") ||
      raw.startsWith("ржЬрж╛ржи ") || raw.startsWith("ржмржЯ ") || raw.startsWith("ржмрзЗржмрж┐ ")
    ) {
      const query = raw
        .replace(/^baby\s+|^bot\s+|^bby\s+|^jan\s+|^xan\s+|^ржЬрж╛ржи\s+|^ржмржЯ\s+|^ржмрзЗржмрж┐\s+/i, "")
        .trim();
      if (!query) return;

      const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
      const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

      for (const reply of responses) {
        await new Promise((resolve) => {
          api.sendMessage(reply, event.threadID, (err, info) => {
            if (!err) {
              global.client.handleReply.push({
                name: module.exports.config.name,
                messageID: info.messageID,
                author: event.senderID,
                type: "simsimi"
              });
            }
            resolve();
          }, event.messageID);
        });
      }
    }
  } catch (err) {
    console.error(err);
    return api.sendMessage(`тЭМ | Error in handleEvent: ${err.message}`, event.threadID, event.messageID);
  }
};
